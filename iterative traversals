#include<bits/stdc++.h>
using namespace std;

struct node {
    struct node *right;
    struct node *left;
    int data;
    
    node(int val)
    {
       data=val;
       right=left=NULL;
    }
};

vector<int> preorderTraverse(node *root)        //preorder iterative method
{
    vector<int> preorder;
    if(root==NULL) return preorder;
    stack<node*> st;
    st.push(root);
    
    while(!st.empty())
    {
        root=st.top();
        st.pop();
        preorder.push_back(root->data);
        
        if(root->right!=NULL) st.push(root->right);
        if(root->left!=NULL) st.push(root->left);
    }
    return preorder;
}


vector<int> inorderTraversal(TreeNode* root) {                  //inorder iterative method 
        vector<int> inorder;
        stack<TreeNode*> st;
        TreeNode* node = root;
        
        while(true)
        {
            if(node!=NULL){
                st.push(node);
                node=node->left;
            }
            
            else{
                if(st.empty()==true) break;
                node=st.top();
                st.pop();
                inorder.push_back(node->val);
                node=node->right;
            }
        }
        return inorder;
        
}
    
    
int main(){
    
    struct node* root = new node(1);
    root->right=new node(2);
    root->left = new node(3);
    root->right->left=new node(4);
    root->right->right=new node(5);
    root->left->left=new node(6);
    
    
    
    
}
